apiVersion: kubeless.io/v1beta1
kind: Function
metadata:
  creationTimestamp: null
  labels:
    created-by: kubeless
    function: producer
  name: producer
  namespace: default
spec:
  checksum: sha256:3cc20091fe8292ef47f24fac252178087b9e03b6564653cfc3a642ea7efa378d
  deployment:
    metadata:
      creationTimestamp: null
    spec:
      selector: null
      strategy: {}
      template:
        metadata:
          creationTimestamp: null
        spec:
          containers:
          - imagePullPolicy: Always
            name: ""
            resources: {}
    status: {}
  deps: |
    {
      "name": "producer",
      "version": "1.0.0",
      "description": "",
      "main": "index.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1"
      },
      "keywords": [],
      "author": "",
      "license": "ISC",
      "dependencies": {
        "amqplib": "^0.8.0",
        "kafkajs": "^1.15.0"
      }
    }
  function: |
    module.exports = {
        producer: async (event, context) => {
            console.log("event occurs");
            const data = event.data;
            // const data = { userId: "1234123dsfadf", imageUrl: "adfadfadf" };
            if (!data || data == "") {
                return "data doesn't exist";
            }
            console.log(data);
            const { userId, imageUrl } = data;
            const planeText = `${userId} ${imageUrl}`;

            console.log(planeText);
            console.log("producer 시작");
            const { Kafka } = require("kafkajs");
            const kafka = new Kafka({
                clientId: "my-app",
                brokers: ["localhost:9092", "kafka.kubeless.svc:9092"],
            });

            const producer = kafka.producer();
            await producer.connect();
            console.log("보내기");
            await producer.send({
                topic: "test-topic",
                messages: [{ value: planeText }],
            });

            await producer.disconnect();
            console.log("producer 끝");
        },
    };
  function-content-type: text
  handler: test.producer
  horizontalPodAutoscaler:
    metadata:
      creationTimestamp: null
    spec:
      maxReplicas: 0
      scaleTargetRef:
        kind: ""
        name: ""
    status:
      conditions: null
      currentMetrics: null
      currentReplicas: 0
      desiredReplicas: 0
  runtime: nodejs12
  service:
    ports:
    - name: http-function-port
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      created-by: kubeless
      function: producer
    type: ClusterIP
  timeout: "180"
